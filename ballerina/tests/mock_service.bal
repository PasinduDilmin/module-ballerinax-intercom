// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerina/log;

listener http:Listener httpListener = new (9090);

http:Service mockService = service object {
    # Delete an article
    #
    # + id - The unique identifier for the article which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Article Not Found)
    resource function delete articles/[int id](@http:Header intercom_version? intercom\-version) returns deleted_article_object|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete a company
    #
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function delete companies/[string id](@http:Header intercom_version? intercom\-version) returns deleted_company_object|ErrorUnauthorized|ErrorNotFound {
    }

    # Detach a contact from a company
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Contact Not Found)
    resource function delete contacts/[string contact_id]/companies/[string id](@http:Header intercom_version? intercom\-version) returns company|ErrorUnauthorized|ErrorNotFound {
    }

    # Remove subscription from a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + id - The unique identifier for the subscription type which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Resource not found)
    resource function delete contacts/[string contact_id]/subscriptions/[string id](@http:Header intercom_version? intercom\-version) returns subscription_type|ErrorUnauthorized|ErrorNotFound {
    }

    # Remove tag from a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + id - The unique identifier for the tag which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Tag not found)
    resource function delete contacts/[string contact_id]/tags/[string id](@http:Header intercom_version? intercom\-version) returns tag|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete a contact
    #
    # + id - id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function delete contacts/[string id](@http:Header intercom_version? intercom\-version) returns contact_deleted|ErrorUnauthorized {
    }

    # Detach a contact from a group conversation
    #
    # + conversation_id - The identifier for the conversation as given by Intercom.
    # + contact_id - The identifier for the contact as given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Detach a contact from a group conversation)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Contact not found)
    # http:UnprocessableEntity (Last customer)
    resource function delete conversations/[string conversation_id]/customers/[string contact_id](@http:Header intercom_version? intercom\-version, @http:Payload detach_contact_from_conversation_request payload) returns conversation|ErrorUnauthorized|ErrorForbidden|ErrorNotFound|ErrorUnprocessableEntity {
    }

    # Remove tag from a conversation
    #
    # + conversation_id - conversation_id
    # + id - id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Tag not found)
    resource function delete conversations/[string conversation_id]/tags/[string id](@http:Header intercom_version? intercom\-version, @http:Payload tags_id_body payload) returns tag|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete a collection
    #
    # + id - The unique identifier for the collection which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (collection Not Found)
    resource function delete help_center/collections/[int id](@http:Header intercom_version? intercom\-version) returns deleted_collection_object|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete a news item
    #
    # + id - The unique identifier for the news item which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (News Item Not Found)
    resource function delete news/news_items/[int id](@http:Header intercom_version? intercom\-version) returns deleted_object|ErrorUnauthorized|ErrorNotFound {
    }

    # Delete tag
    #
    # + id - The unique identifier of a given tag
    # + return - Successful 
    resource function delete tags/[string id](@http:Header intercom_version? intercom\-version) returns http:Ok {
    }

    # Remove tag from a ticket
    #
    # + ticket_id - ticket_id
    # + id - The unique identifier for the tag which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Tag not found)
    resource function delete tickets/[string ticket_id]/tags/[string id](@http:Header intercom_version? intercom\-version, @http:Payload tags_id_body_1 payload) returns tag|ErrorUnauthorized|ErrorNotFound {
    }

    # List all admins
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function get admins(@http:Header intercom_version? intercom\-version) returns admin_list|ErrorUnauthorized {
    }

    # Retrieve an admin
    #
    # + id - The unique identifier of a given admin
    # + return - returns can be any of following types 
    # http:Ok (Admin found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Admin not found)
    resource function get admins/[int id](@http:Header intercom_version? intercom\-version) returns admin|ErrorUnauthorized|ErrorNotFound {
    }

    # List all activity logs
    #
    # + created_at_after - The start date that you request data for. It must be formatted as a UNIX timestamp.
    # + created_at_before - The end date that you request data for. It must be formatted as a UNIX timestamp.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function get admins/activity_logs(@http:Header intercom_version? intercom\-version, string created_at_after, string? created_at_before) returns activity_log_list|ErrorUnauthorized {
    }

    # List all articles
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get articles(@http:Header intercom_version? intercom\-version) returns article_list|ErrorUnauthorized {
    }

    # Retrieve an article
    #
    # + id - The unique identifier for the article which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Article found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Article not found)
    resource function get articles/[int id](@http:Header intercom_version? intercom\-version) returns article|ErrorUnauthorized|ErrorNotFound {
    }

    # Search for articles
    #
    # + phrase - The phrase within your articles to search for.
    # + state - The state of the Articles returned. One of `published`, `draft` or `all`.
    # + help_center_id - The ID of the Help Center to search in.
    # + highlight - Return a highlighted version of the matching content within your articles. Refer to the response schema for more details.
    # + return - returns can be any of following types 
    # http:Ok (Search successful)
    # http:Unauthorized (Unauthorized)
    resource function get articles/search(@http:Header intercom_version? intercom\-version, string? phrase, string? state, int? help_center_id, boolean? highlight) returns article_search_response|ErrorUnauthorized {
    }

    # Retrieve companies
    #
    # + name - The `name` of the company to filter by.
    # + company_id - The `company_id` of the company to filter by.
    # + tag_id - The `tag_id` of the company to filter by.
    # + segment_id - The `segment_id` of the company to filter by.
    # + page - The page of results to fetch. Defaults to first page
    # + per_page - How many results to display per page. Defaults to 15
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function get companies(@http:Header intercom_version? intercom\-version, string? name, string? company_id, string? tag_id, string? segment_id, int? page, int? per_page) returns company_list|ErrorUnauthorized|ErrorNotFound {
    }

    # Retrieve a company by ID
    #
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function get companies/[string id](@http:Header intercom_version? intercom\-version) returns company|ErrorUnauthorized|ErrorNotFound {
    }

    # List attached contacts
    #
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function get companies/[string id]/contacts(@http:Header intercom_version? intercom\-version) returns company_attached_contacts|ErrorUnauthorized|ErrorNotFound {
    }

    # List attached segments for companies
    #
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function get companies/[string id]/segments(@http:Header intercom_version? intercom\-version) returns company_attached_segments|ErrorUnauthorized|ErrorNotFound {
    }

    # Scroll over all companies
    #
    # + scroll_param -
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    resource function get companies/scroll(@http:Header intercom_version? intercom\-version, string? scroll_param) returns company_scroll|ErrorUnauthorized {
    }

    # List all contacts
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get contacts(@http:Header intercom_version? intercom\-version) returns contact_list|ErrorUnauthorized {
    }

    # List all notes
    #
    # + id - The unique identifier of a contact.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:NotFound (Contact not found)
    resource function get contacts/[int id]/notes(@http:Header intercom_version? intercom\-version) returns note_list|ErrorNotFound {
    }

    # List attached segments for contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Contact not found)
    resource function get contacts/[string contact_id]/segments(@http:Header intercom_version? intercom\-version) returns contact_segments|ErrorUnauthorized|ErrorNotFound {
    }

    # List subscriptions for a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Contact not found)
    resource function get contacts/[string contact_id]/subscriptions(@http:Header intercom_version? intercom\-version) returns subscription_type_list|ErrorUnauthorized|ErrorNotFound {
    }

    # List tags attached to a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Contact not found)
    resource function get contacts/[string contact_id]/tags(@http:Header intercom_version? intercom\-version) returns tag_list|ErrorUnauthorized|ErrorNotFound {
    }

    # Get a contact
    #
    # + id - id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get contacts/[string id](@http:Header intercom_version? intercom\-version) returns contact|ErrorUnauthorized {
    }

    # List attached companies for contact
    #
    # + id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Contact not found)
    resource function get contacts/[string id]/companies(@http:Header intercom_version? intercom\-version) returns contact_attached_companies|ErrorUnauthorized|ErrorNotFound {
    }

    # List all conversations
    #
    # + per_page - How many results per page
    # + starting_after - String used to get the next page of conversations.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    resource function get conversations(@http:Header intercom_version? intercom\-version, string? starting_after, int per_page = 20) returns paginated_response|ErrorUnauthorized|ErrorForbidden {
    }

    # Retrieve a conversation
    #
    # + id - The id of the conversation to target
    # + display_as - Set to plaintext to retrieve conversation messages in plain text.
    # + return - returns can be any of following types 
    # http:Ok (conversation found)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function get conversations/[int id](@http:Header intercom_version? intercom\-version, string? display_as) returns conversation|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # List all data attributes
    #
    # + model - Specify the data attribute model to return.
    # + include_archived - Include archived attributes in the list. By default we return only non archived data attributes.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function get data_attributes(@http:Header intercom_version? intercom\-version, "contact"|"company"|"conversation"? model, boolean? include_archived) returns data_attribute_list|ErrorUnauthorized {
    }

    # Download content data export
    #
    # + job_identifier - job_identifier
    # + return - successful 
    resource function get download/content/data/[string job_identifier](@http:Header intercom_version? intercom\-version) returns http:Ok {
    }

    # List all data events
    #
    # + 'type - The value must be user
    # + summary - summary flag
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function get events(@http:Header intercom_version? intercom\-version, string filter, string 'type, boolean? summary) returns data_event_summary|ErrorUnauthorized {
    }

    # Show content data export
    #
    # + job_identifier - job_identifier
    # + return - successful 
    resource function get export/content/data/[string job_identifier](@http:Header intercom_version? intercom\-version) returns data_export {
    }

    # List all collections
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    resource function get help_center/collections(@http:Header intercom_version? intercom\-version) returns collection_list|ErrorUnauthorized {
    }

    # Retrieve a collection
    #
    # + id - The unique identifier for the collection which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Collection found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Collection not found)
    resource function get help_center/collections/[int id](@http:Header intercom_version? intercom\-version) returns collection|ErrorUnauthorized|ErrorNotFound {
    }

    # List all Help Centers
    #
    # + return - returns can be any of following types 
    # http:Ok (Help Centers found)
    # http:Unauthorized (Unauthorized)
    resource function get help_center/help_centers(@http:Header intercom_version? intercom\-version) returns help_center_list|ErrorUnauthorized {
    }

    # Retrieve a Help Center
    #
    # + id - The unique identifier for the collection which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Collection found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Collection not found)
    resource function get help_center/help_centers/[int id](@http:Header intercom_version? intercom\-version) returns help_center|ErrorUnauthorized|ErrorNotFound {
    }

    # Identify an admin
    #
    # + return - Successful response 
    resource function get me(@http:Header intercom_version? intercom\-version) returns admin_with_app {
    }

    # List all news items
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get news/news_items(@http:Header intercom_version? intercom\-version) returns paginated_response|ErrorUnauthorized {
    }

    # Retrieve a news item
    #
    # + id - The unique identifier for the news item which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (News Item Not Found)
    resource function get news/news_items/[int id](@http:Header intercom_version? intercom\-version) returns news_item|ErrorUnauthorized|ErrorNotFound {
    }

    # List all newsfeeds
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get news/newsfeeds(@http:Header intercom_version? intercom\-version) returns paginated_response|ErrorUnauthorized {
    }

    # Retrieve a newsfeed
    #
    # + id - The unique identifier for the news feed item which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get news/newsfeeds/[string id](@http:Header intercom_version? intercom\-version) returns newsfeed|ErrorUnauthorized {
    }

    # List all live newsfeed items
    #
    # + id - The unique identifier for the news feed item which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get news/newsfeeds/[string id]/items(@http:Header intercom_version? intercom\-version) returns paginated_response|ErrorUnauthorized {
    }

    # Retrieve a note
    #
    # + id - The unique identifier of a given note
    # + return - returns can be any of following types 
    # http:Ok (Note found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Note not found)
    resource function get notes/[int id](@http:Header intercom_version? intercom\-version) returns note|ErrorUnauthorized|ErrorNotFound {
    }

    # List all segments
    #
    # + include_count - It includes the count of contacts that belong to each segment.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function get segments(@http:Header intercom_version? intercom\-version, boolean? include_count) returns segment_list|ErrorUnauthorized {
    }

    # Retrieve a segment
    #
    # + id - The unique identified of a given segment.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Segment not found)
    resource function get segments/[string id](@http:Header intercom_version? intercom\-version) returns segment|ErrorUnauthorized|ErrorNotFound {
    }

    # List subscription types
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    resource function get subscription_types(@http:Header intercom_version? intercom\-version) returns subscription_type_list|ErrorUnauthorized {
    }

    # List all tags
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get tags(@http:Header intercom_version? intercom\-version) returns tag_list|ErrorUnauthorized {
    }

    # Find a specific tag
    #
    # + id - The unique identifier of a given tag
    # + return - returns can be any of following types 
    # http:Ok (Tag found)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Tag not found)
    resource function get tags/[string id](@http:Header intercom_version? intercom\-version) returns tag|ErrorUnauthorized|ErrorNotFound {
    }

    # List all teams
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get teams(@http:Header intercom_version? intercom\-version) returns team_list|ErrorUnauthorized {
    }

    # Retrieve a team
    #
    # + id - The unique identifier of a given team.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Team not found)
    resource function get teams/[string id](@http:Header intercom_version? intercom\-version) returns team|ErrorUnauthorized|ErrorNotFound {
    }

    # List all ticket types
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function get ticket_types(@http:Header intercom_version? intercom\-version) returns ticket_type_list|ErrorUnauthorized {
    }

    # Retrieve a ticket type
    #
    # + id - The unique identifier for the ticket type which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Ticket type found)
    # http:Unauthorized (Unauthorized)
    resource function get ticket_types/[string id](@http:Header intercom_version? intercom\-version) returns ticket_type|ErrorUnauthorized {
    }

    # Retrieve a ticket
    #
    # + id - The unique identifier for the ticket which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Ticket found)
    # http:Unauthorized (Unauthorized)
    resource function get tickets/[string id](@http:Header intercom_version? intercom\-version) returns ticket|ErrorUnauthorized {
    }

    # Retrieve a visitor with User ID
    #
    # + user_id - The user_id of the Visitor you want to retrieve.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Visitor not found)
    resource function get visitors(@http:Header intercom_version? intercom\-version, string user_id) returns visitor|ErrorUnauthorized|ErrorNotFound {
    }

    # Create an article
    #
    # + return - returns can be any of following types 
    # http:Ok (article created)
    # http:BadRequest (Bad Request)
    # http:Unauthorized (Unauthorized)
    resource function post articles(@http:Header intercom_version? intercom\-version, @http:Payload create_article_request payload) returns ArticleOk|ErrorBadRequest|ErrorUnauthorized {
    }

    # Create or Update a company
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:BadRequest (Bad Request)
    # http:Unauthorized (Unauthorized)
    resource function post companies(@http:Header intercom_version? intercom\-version, @http:Payload create_or_update_company_request payload) returns CompanyOk|ErrorBadRequest|ErrorUnauthorized {
    }

    # List all companies
    #
    # + page - The page of results to fetch. Defaults to first page
    # + per_page - How many results to return per page. Defaults to 15
    # + 'order - `asc` or `desc`. Return the companies in ascending or descending order. Defaults to desc
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    resource function post companies/list(@http:Header intercom_version? intercom\-version, int? page, int? per_page, string? 'order) returns Company_listOk|ErrorUnauthorized {
    }

    # Create contact
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function post contacts(@http:Header intercom_version? intercom\-version, @http:Payload contacts_body payload) returns ContactOk|ErrorUnauthorized {
    }

    # Create a note
    #
    # + id - The unique identifier of a given contact.
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:NotFound (Contact not found)
    resource function post contacts/[int id]/notes(@http:Header intercom_version? intercom\-version, @http:Payload id_notes_body payload) returns NoteOk|ErrorNotFound {
    }

    # Add subscription to a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Resource not found)
    resource function post contacts/[string contact_id]/subscriptions(@http:Header intercom_version? intercom\-version, @http:Payload contact_id_subscriptions_body payload) returns Subscription_typeOk|ErrorUnauthorized|ErrorNotFound {
    }

    # Add tag to a contact
    #
    # + contact_id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Tag not found)
    resource function post contacts/[string contact_id]/tags(@http:Header intercom_version? intercom\-version, @http:Payload contact_id_tags_body payload) returns TagOk|ErrorUnauthorized|ErrorNotFound {
    }

    # Archive contact
    #
    # + id - id
    # + return - successful 
    resource function post contacts/[string id]/archive(@http:Header intercom_version? intercom\-version) returns Contact_archivedOk {
    }

    # Attach a Contact to a Company
    #
    # + id - The unique identifier for the contact which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:BadRequest (Bad Request)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function post contacts/[string id]/companies(@http:Header intercom_version? intercom\-version, @http:Payload id_companies_body payload) returns CompanyOk|ErrorBadRequest|ErrorUnauthorized|ErrorNotFound {
    }

    # Unarchive contact
    #
    # + id - id
    # + return - successful 
    resource function post contacts/[string id]/unarchive(@http:Header intercom_version? intercom\-version) returns Contact_unarchivedOk {
    }

    # Merge a lead and a user
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function post contacts/merge(@http:Header intercom_version? intercom\-version, @http:Payload merge_contacts_request payload) returns ContactOk|ErrorUnauthorized {
    }

    # Search contacts
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function post contacts/search(@http:Header intercom_version? intercom\-version, @http:Payload search_request payload) returns Contact_listOk|ErrorUnauthorized {
    }

    # Creates a conversation
    #
    # + return - returns can be any of following types 
    # http:Ok (conversation created)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Contact Not Found)
    resource function post conversations(@http:Header intercom_version? intercom\-version, @http:Payload create_conversation_request payload) returns MessageOk|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Convert a conversation to a ticket
    #
    # + id - The id of the conversation to target
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:BadRequest (Bad request)
    resource function post conversations/[int id]/convert(@http:Header intercom_version? intercom\-version, @http:Payload convert_conversation_to_ticket_request payload) returns TicketOk|ErrorBadRequest {
    }

    # Add tag to a conversation
    #
    # + conversation_id - conversation_id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Conversation not found)
    resource function post conversations/[string conversation_id]/tags(@http:Header intercom_version? intercom\-version, @http:Payload conversation_id_tags_body payload) returns TagOk|ErrorUnauthorized|ErrorNotFound {
    }

    # Attach a contact to a conversation
    #
    # + id - The identifier for the conversation as given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Attach a contact to a conversation)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function post conversations/[string id]/customers(@http:Header intercom_version? intercom\-version, @http:Payload attach_contact_to_conversation_request payload) returns ConversationOk|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Manage a conversation
    #
    # + id - The identifier for the conversation as given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Assign a conversation)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function post conversations/[string id]/parts(@http:Header intercom_version? intercom\-version, @http:Payload id_parts_body payload) returns ConversationOk|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Reply to a conversation
    #
    # + id - The Intercom provisioned identifier for the conversation or the string "last" to reply to the last part of the conversation
    # + return - returns can be any of following types 
    # http:Ok (User last conversation reply)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function post conversations/[string id]/reply(@http:Header intercom_version? intercom\-version, @http:Payload reply_conversation_request payload) returns ConversationOk|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Run Assignment Rules on a conversation
    #
    # + id - The identifier for the conversation as given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Assign a conversation using assignment rules)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function post conversations/[string id]/run_assignment_rules(@http:Header intercom_version? intercom\-version) returns ConversationOk|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Redact a conversation part
    #
    # + return - returns can be any of following types 
    # http:Ok (Redact a conversation part)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Not found)
    resource function post conversations/redact(@http:Header intercom_version? intercom\-version, @http:Payload redact_conversation_request payload) returns ConversationOk|ErrorUnauthorized|ErrorNotFound {
    }

    # Search conversations
    #
    # + return - successful 
    resource function post conversations/search(@http:Header intercom_version? intercom\-version, @http:Payload search_request payload) returns Conversation_listOk {
    }

    # Create a data attribute
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:BadRequest (Too few options for list)
    # http:Unauthorized (Unauthorized)
    resource function post data_attributes(@http:Header intercom_version? intercom\-version, @http:Payload create_data_attribute_request payload) returns Data_attributeOk|ErrorBadRequest|ErrorUnauthorized {
    }

    # Submit a data event
    #
    # + return - successful 
    resource function post events(@http:Header intercom_version? intercom\-version, @http:Payload create_data_event_request payload) returns http:Accepted {
    }

    # Create event summaries
    #
    # + return - successful 
    resource function post events/summaries(@http:Header intercom_version? intercom\-version, @http:Payload create_data_event_summaries_request payload) returns http:Ok {
    }

    # Cancel content data export
    #
    # + job_identifier - job_identifier
    # + return - successful 
    resource function post export/cancel/[string job_identifier](@http:Header intercom_version? intercom\-version) returns Data_exportOk {
    }

    # Create content data export
    #
    # + return - successful 
    resource function post export/content/data(@http:Header intercom_version? intercom\-version, @http:Payload create_data_exports_request payload) returns Data_exportOk {
    }

    # Create a collection
    #
    # + return - returns can be any of following types 
    # http:Ok (collection created)
    # http:BadRequest (Bad Request)
    # http:Unauthorized (Unauthorized)
    resource function post help_center/collections(@http:Header intercom_version? intercom\-version, @http:Payload create_collection_request payload) returns CollectionOk|ErrorBadRequest|ErrorUnauthorized {
    }

    # Create a message
    #
    # + return - returns can be any of following types 
    # http:Ok (admin message created)
    # http:BadRequest (No body supplied for email message)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:UnprocessableEntity (No subject supplied for email message)
    resource function post messages(@http:Header intercom_version? intercom\-version, @http:Payload create_message_request payload) returns MessageOk|ErrorBadRequest|ErrorUnauthorized|ErrorForbidden|ErrorUnprocessableEntity {
    }

    # Create a news item
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function post news/news_items(@http:Header intercom_version? intercom\-version, @http:Payload news_item_request payload) returns News_itemOk|ErrorUnauthorized {
    }

    # Create a phone Switch
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:BadRequest (bad request - invalid number)
    # http:Unauthorized (Unauthorized)
    # http:UnprocessableEntity (unprocessable entity)
    resource function post phone_call_redirects(@http:Header intercom_version? intercom\-version, @http:Payload create_phone_switch_request payload) returns Phone_switchOk|JsonBadRequest|ErrorUnauthorized|JsonUnprocessableEntity {
    }

    # Create or update a tag, Tag or untag companies, Tag contacts
    #
    # + return - returns can be any of following types 
    # http:Ok (Action successful)
    # http:BadRequest (Invalid parameters)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (User  not found)
    resource function post tags(@http:Header intercom_version? intercom\-version, @http:Payload tags_body payload) returns TagOk|ErrorBadRequest|ErrorUnauthorized|ErrorNotFound {
    }

    # Create a ticket type
    #
    # + return - returns can be any of following types 
    # http:Ok (Ticket type created)
    # http:Unauthorized (Unauthorized)
    resource function post ticket_types(@http:Header intercom_version? intercom\-version, @http:Payload create_ticket_type_request payload) returns Ticket_typeOk|ErrorUnauthorized {
    }

    # Create a new attribute for a ticket type
    #
    # + ticket_type_id - The unique identifier for the ticket type which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Ticket Type Attribute created)
    # http:Unauthorized (Unauthorized)
    resource function post ticket_types/[string ticket_type_id]/attributes(@http:Header intercom_version? intercom\-version, @http:Payload create_ticket_type_attribute_request payload) returns Ticket_type_attributeOk|ErrorUnauthorized {
    }

    # Create a ticket
    #
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    resource function post tickets(@http:Header intercom_version? intercom\-version, @http:Payload create_ticket_request payload) returns TicketOk|ErrorUnauthorized {
    }

    # Reply to a ticket
    #
    # + return - returns can be any of following types 
    # http:Ok (Admin quick_reply reply)
    # http:BadRequest (User reply)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Not found)
    resource function post tickets/[string id]/reply(@http:Header intercom_version? intercom\-version, @http:Payload id_reply_body payload) returns Ticket_replyOk|ErrorBadRequest|ErrorUnauthorized|ErrorNotFound {
    }

    # Add tag to a ticket
    #
    # + ticket_id - ticket_id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Ticket not found)
    resource function post tickets/[string ticket_id]/tags(@http:Header intercom_version? intercom\-version, @http:Payload ticket_id_tags_body payload) returns TagOk|ErrorUnauthorized|ErrorNotFound {
    }

    # Search tickets
    #
    # + return - successful 
    resource function post tickets/search(@http:Header intercom_version? intercom\-version, @http:Payload search_request payload) returns Ticket_listOk {
    }

    # Convert a visitor
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function post visitors/convert(@http:Header intercom_version? intercom\-version, @http:Payload convert_visitor_request payload) returns ContactOk|ErrorUnauthorized {
    }

    # Set an admin to away
    #
    # + id - The unique identifier of a given admin
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Admin not found)
    resource function put admins/[int id]/away(@http:Header intercom_version? intercom\-version, @http:Payload id_away_body payload) returns admin|ErrorUnauthorized|ErrorNotFound {
    }

    # Update an article
    #
    # + id - The unique identifier for the article which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Article Not Found)
    resource function put articles/[int id](@http:Header intercom_version? intercom\-version, @http:Payload update_article_request payload) returns article|ErrorUnauthorized|ErrorNotFound {
    }

    # Update a company
    #
    # + id - The unique identifier for the company which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Company Not Found)
    resource function put companies/[string id](@http:Header intercom_version? intercom\-version) returns company|ErrorUnauthorized|ErrorNotFound {
    }

    # Update a contact
    #
    # + id - id
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    resource function put contacts/[string id](@http:Header intercom_version? intercom\-version, @http:Payload contacts_id_body payload) returns contact|ErrorUnauthorized {
    }

    # Update a conversation
    #
    # + id - The id of the conversation to target
    # + display_as - Set to plaintext to retrieve conversation messages in plain text.
    # + return - returns can be any of following types 
    # http:Ok (conversation found)
    # http:Unauthorized (Unauthorized)
    # http:Forbidden (API plan restricted)
    # http:NotFound (Not found)
    resource function put conversations/[int id](@http:Header intercom_version? intercom\-version, string? display_as, @http:Payload update_conversation_request payload) returns conversation|ErrorUnauthorized|ErrorForbidden|ErrorNotFound {
    }

    # Update a data attribute
    #
    # + id - The data attribute id
    # + return - returns can be any of following types 
    # http:Ok (Successful)
    # http:BadRequest (Too few options in list)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Attribute Not Found)
    # http:UnprocessableEntity (Has Dependant Object)
    resource function put data_attributes/[int id](@http:Header intercom_version? intercom\-version, @http:Payload update_data_attribute_request payload) returns data_attribute|ErrorBadRequest|ErrorUnauthorized|ErrorNotFound|ErrorUnprocessableEntity {
    }

    # Update a collection
    #
    # + id - The unique identifier for the collection which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Collection Not Found)
    resource function put help_center/collections/[int id](@http:Header intercom_version? intercom\-version, @http:Payload update_collection_request payload) returns collection|ErrorUnauthorized|ErrorNotFound {
    }

    # Update a news item
    #
    # + id - The unique identifier for the news item which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (News Item Not Found)
    resource function put news/news_items/[int id](@http:Header intercom_version? intercom\-version, @http:Payload news_item_request payload) returns news_item|ErrorUnauthorized|ErrorNotFound {
    }

    # Update a ticket type
    #
    # + id - The unique identifier for the ticket type which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Ticket type updated)
    # http:Unauthorized (Unauthorized)
    resource function put ticket_types/[string id](@http:Header intercom_version? intercom\-version, @http:Payload update_ticket_type_request payload) returns ticket_type|ErrorUnauthorized {
    }

    # Update an existing attribute for a ticket type
    #
    # + ticket_type_id - The unique identifier for the ticket type which is given by Intercom.
    # + id - The unique identifier for the ticket type attribute which is given by Intercom.
    # + return - returns can be any of following types 
    # http:Ok (Ticket Type Attribute updated)
    # http:Unauthorized (Unauthorized)
    resource function put ticket_types/[string ticket_type_id]/attributes/[string id](@http:Header intercom_version? intercom\-version, @http:Payload update_ticket_type_attribute_request payload) returns ticket_type_attribute|ErrorUnauthorized {
    }

    # Update a ticket
    #
    # + id - The unique identifier for the ticket which is given by Intercom
    # + return - returns can be any of following types 
    # http:Ok (Successful response)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (Assignee not found)
    resource function put tickets/[string id](@http:Header intercom_version? intercom\-version, @http:Payload update_ticket_request payload) returns ticket|ErrorUnauthorized|JsonNotFound {
    }

    # Update a visitor
    #
    # + return - returns can be any of following types 
    # http:Ok (successful)
    # http:Unauthorized (Unauthorized)
    # http:NotFound (visitor Not Found)
    resource function put visitors(@http:Header intercom_version? intercom\-version, @http:Payload update_visitor_request payload) returns visitor|ErrorUnauthorized|ErrorNotFound {
    }
}
